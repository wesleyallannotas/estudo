-- Procedure
/*Atulizar o Salario
    parametros entrada: Percentual, Numero_depto
    parametros saida: qtde funcionarios
*/
DELIMITER $
CREATE PROCEDURE spAjustaSalario(IN percentual DECIMAL(8,2), numDepto INT, OUT qtdFuncionarios INT)
BEGIN
  SELECT COUNT(*) INTO qtdFuncionarios 
  FROM EMPREGADO 
  WHERE NUMERO_DEPTO = numDepto AND NUMERO_SEGURO_SOCIAL IN( SELECT NUMERO_SEGURO_SOCIAL FROM ASSALARIADO);
  
  UPDATE ASSALARIADO 
  SET SALARIO = SALARIO + (SALARIO * percentual / 100)
  WHERE NUMERO_SEGURO_SOCIAL IN (SELECT NUMERO_SEGURO_SOCIAL FROM EMPREGADO WHERE NUMERO_DEPTO = numDepto);
END $
DELIMITER ;

-- Deletando Procedure
DROP PROCEDURE nome_procedure;

-- Liberando Update
SET SQL_SAFE_UPDATES=0;

-- Utilizando Procedure
CALL spAjustaSalario (10, 25, @qtdFuncionarios);
SELECT @qtdFuncionarios;

-- Testando Mudança
SELECT * 
FROM ASSALARIADO 
WHERE NUMERO_SEGURO_SOCIAL IN (SELECT NUMERO_SEGURO_SOCIAL FROM EMPREGADO WHERE NUMERO_DEPTO = 25);

-- Criando uma View
CREATE VIEW VW_EMPREAGO_ASSALARIADO AS 
SELECT E.NUMERO_SEGURO_SOCIAL, E.DATA_NASCIMENTO, E.SEXO, A.SALARIO 
FROM EMPREGADO E
INNER JOIN ASSALARIADO A
ON E.NUMERO_SEGURO_SOCIAL = A.NUMERO_SEGURO_SOCIAL;
-- Utilizando uma View
SELECT * FROM VW_EMPREAGO_ASSALARIADO;

-- Trigger
-- Criando uma tabela para guardar registro da mudança de salario
CREATE TABLE ASSALARIADO_HISTORICO(CODIGO INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
                                   NUMERO_SEGURO_SOCIAL INT NOT NULL,
                                   SALARIO_ANTERIOR DECIMAL(8,2) NOT NULL,
                                   DATA DATETIME NOT NULL,
                                   SALARIO_NOVO DECIMAL(8,2) NOT NULL,
                                   FOREIGN KEY (NUMERO_SEGURO_SOCIAL) REFERENCES EMPREGADO(NUMERO_SEGURO_SOCIAL));
DELIMITER $
CREATE TRIGGER tgArmazenaSalario AFTER UPDATE
ON ASSALARIADO
FOR EACH ROW
BEGIN
 INSERT INTO ASSALARIADO_HISTORICO(NUMERO_SEGURO_SOCIAL, SALARIO_ANTERIOR, DATA, SALARIO_NOVO) 
 VALUES(new.NUMERO_SEGURO_SOCIAL, OLD.SALARIO, CURDATE(), NEW.SALARIO);
END $
DELIMITER ;

-- Criando uma trasação
-- Vamos inserir daods no empregado e no assalariado e queremos garantis a consistência
DELIMITER $
CREATE PROCEDURE sp_inserirEmpregadoAssalariado(IN NUMERO_SEGURO_SOCIAL INT,
IN NOME VARCHAR(150), IN DATA_NASCIMENTO DATE, IN SEXO CHAR(1), IN NUMERO VARCHAR(10), 
IN NUMERO_DEPTO INT, IN NUMERO_SEGURO_SOCIAL_SUPERVISOR INT, IN BAIRRO VARCHAR(150), 
IN RUA VARCHAR(150), IN SALARIO DECIMAL(10,2))
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      ROLLBACK;
    END; -- Este inicio informa que caso ocorra um erro, realize um rollback
    START TRANSACTION;
      INSERT INTO EMPREGADO(NUMERO_SEGURO_SOCIAL, NOME, DATA_NASCIMENTO, 
      SEXO, NUMERO_DEPTO, NUMERO_SEGURO_SOCIAL_SUPERVISOR, BAIRRO, RUA, NUMERO) 
      VALUES(NUMERO_SEGURO_SOCIAL, NOME, DATA_NASCIMENTO, SEXO, NUMERO_DEPTO, 
      NUMERO_SEGURO_SOCIAL_SUPERVISOR, BAIRRO, RUA, NUMERO);
      INSERT INTO ASSALARIADO(NUMERO_SEGURO_SOCIAL, SALARIO) VALUES (NUMERO_SEGURO_SOCIAL, SALARIO);
  COMMIT;
END $ 
DELIMITER ;

-- Utilizando a Transação
CALL sp_inserirEmpregadoAssalariado(98, 'Renato Alvesa', '2000-01-01', 'M', '25', 30, 888, 'Jd Cabral', 'Rua Moises', 5556.60);

select * from ASSALARIADO;